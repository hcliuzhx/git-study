git版本控制

一、起步
一1.关于
1.1本地版本控制系统
RVS
丢失风险

1.2集中化版本控制系统-CVCS
CVS
Subversion
Perforce
缺点：单点故障

1.3分布式版本控制系统-DVCS
 Git、Mercurial、Bazaar 以及 Darcs 
优点：
1.3.1.客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来
任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复
1.3.2.可以指定和若干不同的远端代码仓库进行交互
籍此，就可以在同一个项目中，分别和不同工作小组的人相互协作



一2.简史
Linux 开源社区开发，目标：
1.速度
2.简单设计
3.对非线性开发模式强力支持(成千上万分支)
4.完全分布式
5.有能力高效管理超大规模项目(速度和数据量)


一3.基础
和其他版本控制工具有很大差异
3.1直接记录快照，而非比较差异
其它大部分系统以文件变更列表的方式存储信息
这类系统 将他们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异
Git 更像是把数据看作是对小型文件系统的一组快照。 
每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引

3.2.近乎所有操作都是本地执行
3.3.Git 保证完整性
3.4.Git 一般只添加数据

3.4.三种状态
已提交（committed）、已修改（modified）和已暂存（staged）

工作目录、暂存区域以及 Git 仓库

基本的 Git 工作流程如下：
3.4.1.在工作目录中修改文件。
3.4.2.暂存文件，将文件的快照放入暂存区域。
3.4.3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。



4.命令

5.安装


一6.初次运行配置
git config工具

a. /etc/gitconfig文件
 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。
b.~/.gitconifg 或 ~/.config/git/config 文件
 只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。
c. .git/config
 当前使用仓库的 Git 目录中的 config 文件,针对该仓库

每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。

用户信息
$git config --global user.name "John Doe"
$git config --global user.email johndoe@example.com

默认文本编辑器vim
$git config --global core.editor emacs
 如果未配置，Git 会使用操作系统默认的文本编辑器，通常是 Vim,提交注释时用

检查配置信息
$git config --list

你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置
（例如：/etc/gitconfig 与 ~/.gitconfig）。 
这种情况下，Git 会使用它找到的每一个变量的最后一个配置。

你可以通过输入 git config <key>： 来检查 Git 的某一项配置
$git config user.name


一7.获取帮助
三种方法
$git help <verb>
$git <verb> --help
$man git-<verb>

例如，要想获得 config 命令的手册，执行
$git help config




二、git基础
二1.获取git 仓库
1.1在现有目录中初始化仓库
$git init 

$git add *.java
$git add LICENSE
$git commit -m 'initial project...'

1.2克隆现有仓库
执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来
$git clone https://github.com/libgit2/libgit2
自定义本地仓库的名字:
$git clone https://github.com/libgit2/libgit2 mylibgit

上面的例子使用的是 https:// 协议，
也可以使用 git:// 协议 或SSH 传输协议，如 user@server:path/to/repo.git 



二2.记录每次更新到仓库
文件状态 untracked unmodified modified staged 
2.1检查当前文件状态
$git status

2.2跟踪新文件
$git add LICENSE
$git add src

2.3.状态简览
$git status -s
$git status --short

新添加到暂存区中的文件前面有 A 标记
修改过的文件前面有 M 标记
删除的有D标记
新添加的未跟踪文件前面有 ?? 标记

MM:
出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区

m modified
a added
d deleted
? untracked new file


2.4.忽略文件
文件名：.gitignore
格式规范
a)所有空行或者以 ＃ 开头的行都会被 Git 忽略。
b)可以使用标准的 glob 模式匹配。
c)匹配模式可以以（/）开头防止递归。
d)匹配模式可以以（/）结尾指定目录。
e)要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

例子:
{
#忽略以.a结尾的文件
*.a

#就算lib.a也是以.a结尾，也不要忽略
!lib.a

#只忽略当前目录下的TODO文件，而不忽略子目录下的TODO文件
/TODO

#忽略在build/目录下的所有文件及文件夹
build/

#忽略doc/目录下的txt文件,但是不忽略doc/xx/目录下的txt文件 
doc/*.txt

#忽略doc/目录及其子目录下的所有txt文件
doc/**/*.txt
}

2.5.查看已暂存和未暂存的修改内容
$git diff  #只显示尚未暂存的改动
$git diff --staged 
$git diff --cached #查看已暂存的将要添加到下次提交里的内容
 
2.6
提交更新
$git commit #跳转vim 写注释 ，wq后提交
$git -v commit #跳转vim 附带diff信息
$git commit -m "说明注释" #单行注释

2.7跳过使用暂存区域
$git commit -a -m "跳过暂存"
把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤

2.8移除文件
git库中已存在xxx文件时
$rm xxx #会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到 deleted:    xxx
$git rm xxx #会在 “Changes to be committed” 部分（也就是 未暂存清单）看到 deleted:    xxx

$git rm --cached xxx  #从暂存区域移除
$ git rm log/\*.log  #删除 log/ 目录下扩展名为 .log 的所有文件
$ git rm \*~  #该命令为删除以 ~ 结尾的所有文件。


2.9.移动文件
$git mv file_from file_to
显示为 renamed:   file_from -> file_to

git mv 就相当于运行了下面三条命令：
$ mv README.md README
$ git rm README.md
$ git add README
如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样



二3.查看提交历史
3.1.查看命令
$git log
默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。
这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。

$ git log -p -2
-p，用来显示每次提交的内容差异。 -2 仅显示最近两次提交

$ git log --stat
--stat选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了
以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结

$ git log --pretty=oneline
--pretty这个选项可以指定使用不同于默认格式的方式展示提交历史
用 oneline 将每个提交放在一行显示

$ git log --pretty=format:"%h - %an, %ar : %s"
定制要显示的记录格式

选项	说明
%H	提交对象（commit）的完整哈希字串
%h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串
%t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串
%p	父对象的简短哈希字串
%an	作者（author）的名字
%ae	作者的电子邮件地址
%ad	作者修订日期（可以用 --date= 选项定制格式）
%ar	作者修订日期，按多久以前的方式显示
%cn	提交者（committer）的名字
%ce	提交者的电子邮件地址
%cd	提交日期
%cr	提交日期，按多久以前的方式显示
%s	提交说明

$ git log --pretty=format:"%h %s" --graph

3.2限制输出长度
 -<n> 选项
$git log -3

还有按照时间作限制的选项，比如 --since 和 --until
$ git log --since=2.weeks
$ git log --since= "2008-01-15"
$ git log --since="2 years 1 day 3 minutes ago"

$ git log -Sfunction_name
列出那些添加或移除了某些字符串的提交

选项	说明
-(n)	仅显示最近的 n 条提交
--since, --after	仅显示指定时间之后的提交。
--until, --before	仅显示指定时间之前的提交。
--author	仅显示指定作者相关的提交。
--committer	仅显示指定提交者相关的提交。
--grep	仅显示含指定关键字的提交
-S	仅显示添加或移除了某个关键字的提交

git log --pretty=format:"%cd %h %s %an"

$git log --pretty=format:"%cd %h %s" --date=iso --author liuzhaoxu
日期iso8601格式
$git log --pretty=format:"%cd %h %s" --date=short --author liuzhaoxu
日期iso短格式

git log --pretty="%h - %s" --author=gitster --since="2008-10-01" --before="2008-11-01" --no-merges -- t/
按格式搜索t/路径下author=gitster的2008年10月期间 提交的但未合并的文件



二4.撤消操作
4.1重新提交:
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend

将暂存区中的文件提交
如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息
最终你只会有一个提交 - 第二次提交将代替第一次提交的结果。


4.2取消暂存的文件
git reset HEAD <file>...

4.3撤消对文件的修改
git checkout -- CONTRIBUTING.md



二5.查看远程仓库
5.1.查看命令
$git remote

$git remote -v 
选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL

5.2添加远程仓库
git remote add mt https://github.com/liuzhaoxu/mytest
添加时不会有问题，但是，推拉时如果没这个库，会报错

5.3.从远程仓库中抓取与拉取
$ git fetch [remote-name]
$ git pull [remote-name]

用 clone 命令克隆一个仓库，命令会自动将其添加为远程仓库并默认以origin为简写
git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作
注意 git fetch 命令会将数据拉取到你的本地仓库 - 并不会自动合并或修改你当前的工作
如果你有一个分支设置为跟踪一个远程分支，可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。
默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）
运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。

5.4.推送到远程仓库
git push [remote-name] [branch-name]

$ git push origin master
只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 
当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 
你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送


5.5.查看远程仓库更多信息
$git remote show origin
列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。
它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，
还有当你执行 git pull 时哪些分支会自动合并。

5.6.远程仓库的移除与重命名
$ git remote rename mt mt2
$ git remote rm mt2


二6.打标签
给历史中的某一个提交打上标签
6.1.列出标签
$ git tag
$ git tag -l 'v1.8.5*'

6.2.创建标签
两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）
一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。
附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；


6.3.附注标签
$git tag -a v1.4 -m 'my version 1.4'

6.4.轻量标签
$git tag v1.4 
 轻量标签本质上是将提交校验和存储到一个文件中 - 没有保存任何其他信息。 
你不会看到额外的标签信息。 命令只会显示出提交信息

6.5.后期打标签
可以对过去的提交打标签

6.6共享标签
默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 
在创建完标签后你必须显式地推送标签到共享服务器上。
这个过程就像共享远程分支一样 
可以运行 git push origin [tagname]。
$ git push origin v1.5

$ git push origin --tags
如果想要一次性推送很多标签，也可以使用带有 --tags 选项的 git push 命令。 
这将会把所有不在远程仓库服务器上的标签全部传送到那里


6.7.检出标签
并不能真的检出一个标签，因为它们并不能像分支一样来回移动
如果你想要工作目录与仓库中特定的标签版本完全一样，
可以使用 git checkout -b [branchname] [tagname] 在特定的标签上创建一个新分支
$ git checkout -b version2 v2.0.0



二7.Git别名
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
当要输入 git commit 时，只需要输入 git ci

$ git config --global alias.unstage 'reset HEAD --'
$ git config --global alias.last 'log -1 HEAD'


想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号
$ git config --global alias.visual '!gitk'



三、Git分支
在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。
必杀技特性(难以置信的轻量)
创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷
Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次

三1.分支简介
a)暂存操作会为每一个文件计算校验和（SHA-1算法），
然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 对象来保存它们），
最终将校验和加入到暂存区域等待提交
b)当使用 git commit 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和，
然后在 Git 仓库中这些校验和保存为树对象。 
随后Git创建一个提交对象，除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针
c)做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针

Git的分支，其实本质上仅仅是指向提交对象的可变指针。

1.1创建分支
$git branch testing
这会在当前所在的提交对象上创建一个指针
提交对象上可以有多个指向的指针
有一个名为 HEAD 的特殊指针,指向当前所在的本地分支

你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。
$ git log --oneline --decorate
git log --pretty=format:"%cd %h %an %d" --date=short --decorate --all -20


1.2切换分支
git checkout testing

$ git log --oneline --decorate --graph --all
查看分支走向
 
 
 
三2.分支的新建与合并
2.1.新建分支
$ git checkout -b iss53
等同于：
$ git branch iss53 #新建分支
$ git checkout iss53 #切换分支

$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'

$ git checkout master #先切到master
$ git merge hotfix #把hotfix合并到master
"快进（fast-forward）"。 
当前 master 分支所指向的提交是你当前提交（有关 hotfix 的提交）的直接上游，
所以 Git 只是简单的将指针向前移动。 
当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，
那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），
因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”
$ vim index.html
$ git commit -a -m 'fixed the broken email address' 

$ git checkout master #切换到master分支
$ git merge hotfix  #把hotfix分支合并到当前分支

$ git branch -d hotfix #删除hotfix分支


$ git checkout iss53
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'


2.2分支的合并
$ git checkout master
Switched to branch 'master'
$ git merge iss53 #把iss53分支合并到当前分支(没冲突时)
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)

$ git branch -d iss53

2.3遇到冲突时的分支合并
有时候合并操作不会如此顺利。 如果你在两个不同的分支中，
对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.

$ git mergetool
该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突

$git commit # 默认有提交信息



三3.分支管理
$ git branch  #查看分支

$ git branch -v #查看每一个分支的最后一次提交

--merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 
$ git branch --merged

$ git branch --no-merged
这里显示了其他分支。 因为它包含了还未合并的工作，尝试使用 git branch -d 命令删除它时会失败
如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 -D 选项强制删除它



三4.分支开发工作流
4.1长期分支
在 master 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码
还有一些名为 develop 或者 next 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，
  但是一旦达到稳定状态，它们就可以被合并入 master 分支了

4.2特性分支
特性分支是一种短期分支，它被用来实现单一特性或其相关工作。
快速并且完整地进行上下文切换（context-switch）
因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，
  因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。


三5.远程分支
远程引用是对远程仓库的引用（指针），包括分支、标签等等。 
你可以通过 git ls-remote (remote) 来显式地获得远程引用的完整列表
通过 git remote show (remote) 获得远程分支的更多信息

“origin” 是当你运行 git clone 时默认的远程仓库名字。
 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/maste

 git fetch origin 
 这个命令查找 “origin” 是哪一个服务器，
 从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针指向新的、更新后的位置。
 
git remote add teamone

运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据

5.1.推送
git push (remote) (branch)

$ git push origin serverfix
Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix
推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。

git push origin serverfix:serverfix
推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支。

git push origin serverfix:awesomebranch 
将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支


如何避免每次输入密码
如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。
 默认情况下它会在终端中提示服务器是否允许你进行推送。
如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。 
最简单的方式就是将其保存在内存中几分钟，
可以简单地运行 git config --global credential.helper cache 来设置它。

$ git fetch origin
特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。
 换一句话说，这种情况下，不会有一个新的 serverfix 分支 - 只有一个不可以修改的 origin/serverfix 指针

可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支

如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上:
$ git checkout -b serverfix origin/serverfix
这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。


5.2.跟踪分支
从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）
跟踪分支是与远程分支有直接关系的本地分支。 
如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支

git checkout -b [branch] [remotename]/[branch]
 

如果想要将本地分支与远程分支设置为不同名字，
你可以轻松地增加一个不同名字的本地分支的上一个命令：
$ git checkout -b sf origin/serverfix

$ git checkout --track origin/serverfix
新建一个本地同名分支serverfix，并跟踪origin/serverfix 
相当于：$ git checkout -b serverfix origin/serverfix

设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，
或者想要修改正在跟踪的上游分支，你可以在任意时间
使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置:
$ git branch -u origin/nq001

如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。
 这会将所有的本地分支列出来并且包含更多的信息，
 如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
ahead” 是 2，意味着本地有两个提交还没有推送到服务器上


5.3拉取
git pull 在大多数情况下它的含义
是一个 git fetch 紧接着一个 git merge 命令

不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，
git pull 都会查找当前分支所跟踪的服务器与分支，
从服务器上抓取数据然后尝试合并入那个远程分支

由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。


5.4删除远程分支
$ git push origin --delete serverfix


三.6.变基
 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase

6.1.变基的基本操作
$ git checkout experiment
$ git rebase master

C1 <-- C2 <-- C3(master)
       C2 <-- C4(experiment)
它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先 C2，
然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，
然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。

$ git checkout master
$ git merge experiment

与merge方法的最终结果没有任何区别，但是变基使得提交历史更加整洁

一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁

请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 
变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。


6.2.有趣的变基例子
git rebase --onto master server client
取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，
然后把它们在 master 分支上重放一遍

使用 git rebase [basebranch] [topicbranch] 命令可以直接将特性分支（即本例中的 server）
变基到目标分支（即 master）上。这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。
$ git rebase master server

$ git checkout master
$ git merge server

$ git branch -d client
$ git branch -d server


6.3.变基的风险
https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA
不要对在你的仓库外有副本的分支执行变基。

变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。

6.4.用变基解决变基

如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，
如果我们不是执行合并，而是执行 git rebase teamone/master, Git 将会：

a)检查哪些提交是我们的分支上独有的
b)检查其中哪些提交不是合并操作的结果
c)检查哪些提交在对方覆盖更新时并没有被纳入目标分支
d)把查到的这些提交应用在 teamone/master 上面

git pull --rebase
等于：先 git fetch，再 git rebase teamone/master

如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，
你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。

6.5.变基 vs. 合并

有一种观点认为，仓库的提交历史即是 记录实际发生过什么。
 它是针对历史的文档，本身就有价值，不能乱改。 
 从这个角度看来，改变提交历史是一种亵渎，你使用_谎言_掩盖了实际发生过的事情。 
 如果由合并产生的提交历史是一团糟怎么办？ 
 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。

另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。
 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。
 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。

总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，
从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。



另外：
暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop

